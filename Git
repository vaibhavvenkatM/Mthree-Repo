# Git Bash

Git Bash is a command-line interface for Git on Windows. It allows users to run Git commands efficiently.

## Basic Commands

- **ls** (List directory contents)
  
  `ls`

- **mkdir** (Create a new directory)
  
  `mkdir new_project`

- **cd** (Change directory)
  
  `cd new_project`

## Setup Git

Configure Git with user details:

```bash
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

Initialize a Git Repository
git init


Create a Git Repository on GitHub
Go to GitHub and create a new repository.
Copy the repository URL.
Run the following command:

git remote add origin <repository_url>


Add & Commit Files
Add files to staging:

git add .


Commit changes:

git commit -m "Initial commit"


Push Changes
git push origin main

Create a Branch
git branch feature-branch


Switch to a Branch
git checkout feature-branch


Merge Branches
Switch to the main branch and merge:
git checkout main
git merge feature-branch

Pull Request (PR)
A Pull Request is a request to merge code into another branch. Steps to create a PR:

Push your branch to GitHub.
Open GitHub, go to the repository.
Click "Compare & Pull Request."
Add details and create the PR.


# Git Basics and Stash Command

## Introduction to Git and Branching

Git is a powerful version control system that allows multiple developers to collaborate on the same project efficiently. Instead of working directly on the main branch, most companies prefer using feature branches. This approach ensures that any modifications are tested and reviewed before being merged into the main branch, preventing unintended disruptions or crashes in the application.

When a developer works on a feature, there may be scenarios where they need to switch to another task before completing their current work. However, committing incomplete changes is not ideal. To handle this situation, Git provides the `git stash` command, which temporarily stores changes and allows developers to switch contexts without losing progress.

## Understanding Git Stash

Git stash is a useful command that enables developers to save their ongoing work without committing it. This feature is beneficial when switching branches or working on urgent tasks while keeping the uncommitted changes safe. Developers can retrieve the stashed changes later and continue working seamlessly.

### Key Git Stash Commands

Here are some essential Git stash commands and their usage:

Saving Staged Changes with a Message: `git stash save WIP`

Adding a File to the Staging Area: Prepares the file for a commit by adding it to the staging area. Command - `git add module.py`

Listing Files in the Directory: Displays all files in the current directory and helps check recorded stashes. Command - `ls -lrt`

Viewing Saved Stashes: Shows all saved stashes with their respective identifiers. Command - `git stash list`

Inspecting a Specific Stash: Displays details of a particular stash without applying it. Command - `git stash show stash@{0}`

Applying and Removing the Latest Stash: Retrieves and applies the most recent stash while removing it from the list. Command - `git stash pop`

## Working with Branches and Merging

When working on different features or bug fixes, developers use branches to isolate changes before merging them into the main branch. Below are some essential Git commands to manage branches and merging:

Creating and Switching to a New Branch: Creates a new branch called `bugFix` and switches to it. Command - `git checkout -b bugFix`

Committing Changes: Saves changes to the current branch. Command - `git commit`

Switching Back to the Main Branch: Moves back to the main branch. Command - `git checkout main`

Committing Changes on the Main Branch: Saves changes made in the main branch. Command - `git commit`

Merging a Branch into Main: Integrates the changes from `bugFix` into the main branch. Command - `git merge bugFix`

Creating a New Branch and Switching to It: Command - `git checkout -b bugFix`

## Learning GitHub

In the afternoon session, the focus was on learning GitHub, a cloud-based Git repository hosting service. GitHub enhances collaboration by providing features like pull requests, code reviews, and issue tracking.

A great resource to practice and visualize Git commands is **[Learn Git Branching](https://learngitbranching.js.org/)**, which provides interactive tutorials on Git concepts.

### Git Cheat Sheet

```md
# üìå Git Cheat Sheet  

## üîπ Basic Commands  
```sh
git init                           # Initialize a new Git repository  
git clone <repo_url>               # Clone an existing repository  
git status                         # Show the status of changes  
git add <file>                     # Stage a file for commit  
git commit -m "message"            # Commit staged files  
```

## üîπ Branching & Merging  
```sh
git branch <branch_name>           # Create a new branch  
git checkout <branch_name>         # Switch to a branch  
git merge <branch_name>            # Merge a branch into the current branch  
```

## üîπ Working with Remote Repositories  
```sh
git remote add origin <url>        # Link local repo to a remote repo  
git push origin <branch>           # Push changes to the remote repo  
git pull origin <branch>           # Fetch and merge remote changes  
git fetch                          # Fetch changes without merging  
```

## üîπ Undoing Changes  
```sh
git reset --soft HEAD~1            # Undo last commit (keep changes staged)  
git reset --hard HEAD~1            # Undo last commit (discard changes)  
git revert <commit_id>             # Create a new commit that undoes changes  
```

## üîπ Stashing Changes  
```sh
git stash                          # Save uncommitted changes temporarily  
git stash list                     # View stashed changes  
git stash apply                    # Reapply last stashed changes  
git stash drop                     # Delete last stash  
```

## üí° **Quick Tips**  
‚úîÔ∏è Always pull before pushing to avoid conflicts.  
‚úîÔ∏è Use meaningful commit messages.  
‚úîÔ∏è Avoid committing sensitive data like credentials.  
‚úîÔ∏è Use `git log --oneline --graph` to visualize commit history.  

---



# Git Rebase Explained

## What is Git Rebase?
Git rebase is a command used to **move or apply commits** from one branch onto another in a linear fashion. It helps maintain a **clean and structured commit history** by avoiding unnecessary merge commits.

---

## How Git Rebase Works
Instead of merging two branches (which creates an additional merge commit), `git rebase` **takes the commits from a branch and applies them on top of another branch**.  

### Example:
Assume this is your branch structure:
```
A---B---C (feature-branch)
     /
D---E---F (main)
```
If you run:
```bash
git checkout feature-branch
git rebase main
```
Git will:
1. Move `feature-branch` to `main`'s latest commit.  
2. Apply commits **B and C** on top of `F`, making it look like:
```
D---E---F---B'---C' (feature-branch rebased)
```
This removes unnecessary merge commits, keeping history linear.

---

## Types of Git Rebase

### 1Ô∏è‚É£ Basic Rebase
Moves a branch‚Äôs commits on top of another branch.
```bash
git checkout feature-branch
git rebase main
```

### 2Ô∏è‚É£ Interactive Rebase (`-i`)
Allows **modifying commit history** (reordering, squashing, editing commits).
```bash
git rebase -i HEAD~3
```
It opens an editor where you can:
- `pick` ‚Üí Keep commit as is  
- `reword` ‚Üí Change commit message  
- `squash` ‚Üí Merge commits into one  
- `edit` ‚Üí Modify commit  

### 3Ô∏è‚É£ Rebase Onto (`--onto`)
Useful when rebasing a branch onto a different base.
```bash
git rebase --onto new-base old-base feature-branch
```
This takes all commits **after `old-base`** and applies them onto `new-base`.

### 4Ô∏è‚É£ Aborting a Rebase
If conflicts occur and you want to cancel:
```bash
git rebase --abort
```

### 5Ô∏è‚É£ Continuing After Conflict
Resolve conflicts, then:
```bash
git add .
git rebase --continue
```

---

## Git Rebase vs Git Merge
| Feature | Git Rebase | Git Merge |
|---------|-----------|-----------|
| History | Linear | Maintains merge history |
| Merge Commit | No merge commits | Creates merge commits |
| Use Case | Clean commit history | Preserving branch history |

### When to Use Git Rebase?
‚úÖ Keeping a clean history  
‚úÖ Updating feature branches before merging  
‚úÖ Avoiding unnecessary merge commits  

### When NOT to Use Git Rebase?
‚ùå On **shared branches** (rewriting history can cause issues)  
‚ùå When you need to keep track of merge points  

---

## Real-Life Scenario
You're working on a **feature branch** (`feature-branch`), and `main` has new changes. Instead of merging:
```bash
git checkout feature-branch
git rebase main
```

## Git Stash Explained

### What is Git Stash?
Git stash allows you to **save uncommitted changes** without committing them, so you can work on something else and later restore them. This is useful when you need to:
- Switch branches without committing changes.  
- Temporarily save work-in-progress changes.  
- Clean the working directory without losing progress.  

---

## Basic Git Stash Commands

### 1Ô∏è‚É£ Stash Changes
Saves uncommitted changes and clears the working directory.
```bash
git stash
```

### 2Ô∏è‚É£ List Stashed Changes
To view all stashes:
```bash
git stash list
```

### 3Ô∏è‚É£ Apply Stashed Changes
To restore the most recent stash:
```bash
git stash apply
```

### 4Ô∏è‚É£ Apply and Remove Stash
To restore and delete the stash:
```bash
git stash pop
```

### 5Ô∏è‚É£ Stash with a Message
To stash with a custom message:
```bash
git stash save "Work in progress: Fixing login bug"
```

### 6Ô∏è‚É£ Stash Only Tracked Files
To stash only tracked files, ignoring new untracked files:
```bash
git stash -u
```

### 7Ô∏è‚É£ Stash Only Staged Files
To stash only staged (added) changes:
```bash
git stash --keep-index
```

### 8Ô∏è‚É£ Drop (Delete) a Specific Stash
To delete a specific stash (e.g., `stash@{1}`):
```bash
git stash drop stash@{1}
```

### 9Ô∏è‚É£ Clear All Stashes
To delete all stashed changes:
```bash
git stash clear
```
---

## Forking vs Cloning

| Feature | Forking | Cloning |
|---------|---------|---------|
| Ownership | Creates a copy in your GitHub account | Creates a local copy of a repository |
| Usage | Used for contributing to open-source projects | Used for personal or team development |
| Changes | Must submit pull requests to contribute | Directly push changes if you have access |

---

## Git Branching

Git branching allows developers to work on different features independently.

### Creating a Branch
```bash
git branch feature-branch
```

### Switching to a Branch
```bash
git checkout feature-branch
```
Or, using the new syntax:
```bash
git switch feature-branch
```

### Creating and Switching to a Branch
```bash
git checkout -b new-branch
```

### Deleting a Branch
```bash
git branch -d feature-branch
```

### Listing All Branches
```bash
git branch -a
```

### Merging a Branch
```bash
git checkout main
git merge feature-branch
```

---
# Git Reset vs Git Revert

## **Git Reset** (Undo Commits & Changes)

Imagine you‚Äôre writing an essay and suddenly realize you need to remove a few paragraphs. **Git reset** allows you to go back in time and erase commits, as if they never happened.

### **Types of Git Reset**

1. **Soft Reset (`git reset --soft <commit>`)**  
   - Moves the HEAD (current branch pointer) to the specified commit.
   - Keeps all changes in the staging area (ready for commit).
   - Useful if you want to **redo a commit**.

   **Example:**  
   ```bash
   git reset --soft HEAD~1
   ```
   *Moves back one commit, but your changes remain staged.*

2. **Mixed Reset (`git reset --mixed <commit>`)** (Default)  
   - Moves HEAD to the specified commit.
   - Removes commits from history **but keeps changes in the working directory** (not staged).
   - Useful if you want to **edit your changes before recommitting**.

   **Example:**  
   ```bash
   git reset --mixed HEAD~1
   ```
   *Moves back one commit, removes it, but keeps your files untouched.*

3. **Hard Reset (`git reset --hard <commit>`)**  
   - Moves HEAD to the specified commit.
   - **Deletes all changes permanently** (cannot be recovered).
   - Useful if you want to **completely discard changes**.

   **Example:**  
   ```bash
   git reset --hard HEAD~1
   ```
   *Removes the last commit and deletes all changes.*

---

## **Git Revert** (Undo Without Losing History)

Unlike `git reset`, **git revert does NOT delete commits**. Instead, it creates a new commit that undoes the changes from a previous commit.

Imagine you made a mistake in your essay but instead of deleting the paragraph, you add a note correcting it. That‚Äôs what `git revert` does.

### **How to Revert a Commit**
```bash
git revert <commit-hash>
```
- Creates a new commit that **reverses** the specified commit.
- The history remains intact, making it safer than `git reset`.

**Example:**  
```bash
git revert HEAD~1
```
*Reverts the last commit by creating a new commit that undoes its changes.*

### **When to Use Git Reset vs Git Revert?**

| Scenario | Use `git reset` | Use `git revert` |
|----------|----------------|------------------|
| Completely remove commits | ‚úÖ Yes | ‚ùå No |
| Keep commit history clean | ‚ùå No | ‚úÖ Yes |
| Undo a commit on a shared branch | ‚ùå No (Dangerous) | ‚úÖ Yes (Safe) |
| Recoverable changes | ‚ùå No (if hard reset) | ‚úÖ Yes |

---

## **In Short:**
- `git reset` **erases commits** (like deleting a paragraph).
- `git revert` **creates a new commit that undoes changes** (like adding a correction note).  
- **Use `git revert` when working with a team** to avoid history conflicts.

---
# **Git Theoretical Questions and Answers**  

## **Introduction**  
This document provides a comprehensive list of Git theoretical questions along with detailed answers. It covers fundamental, intermediate, and advanced concepts, making it useful for beginners and experienced developers alike.  

---

## **Basic Git Questions**  

### **1. What is Git?**  
**Answer:**  
Git is a distributed version control system (VCS) that helps developers track changes in code, collaborate with teams, and manage source code efficiently. It allows multiple developers to work on a project simultaneously without overwriting each other's changes.  

### **2. What is a repository in Git?**  
**Answer:**  
A repository (repo) is a storage location that holds the project's files and complete revision history. It can be:  
- **Local Repository:** Stored on your machine.  
- **Remote Repository:** Hosted on services like GitHub, GitLab, or Bitbucket.  

To create a new local repository:  
```sh
git init
```  

To clone an existing remote repository:  
```sh
git clone https://github.com/user/repo.git
```  

### **3. What is the difference between Git and GitHub?**  
**Answer:**  
| Feature | Git | GitHub |
|---------|----|--------|
| Definition | Version Control System | Hosting service for Git repositories |
| Purpose | Tracks changes, manages source code | Enables collaboration, backup, and sharing |
| Accessibility | Works locally | Works online with remote repositories |

### **4. What is a commit in Git?**  
**Answer:**  
A commit is a snapshot of the repository at a specific point in time. Each commit has a unique identifier (SHA) and a message describing the changes.  

Example:  
```sh
git add file.txt
git commit -m "Added a new file"
```  

### **5. What is the difference between `git add` and `git commit`?**  
**Answer:**  
| Command | Purpose |
|---------|---------|
| `git add` | Stages changes for the next commit |
| `git commit` | Saves the staged changes permanently to the repository |

Example:  
```sh
git add file1.txt file2.txt
git commit -m "Added two files"
```  

### **6. What is a branch in Git?**  
**Answer:**  
A branch is an independent line of development. It allows developers to work on new features without affecting the main codebase.  

Example:  
```sh
git branch feature-branch  # Creates a new branch
git checkout feature-branch  # Switch to the new branch
```  

---

## **Intermediate Git Questions**  

### **7. What is the difference between `git pull` and `git fetch`?**  
**Answer:**  
| Command | Description |
|---------|-------------|
| `git pull` | Fetches changes from the remote repository and merges them into the current branch |
| `git fetch` | Only downloads changes from the remote repository without merging |

Example:  
```sh
git fetch origin main  # Retrieves latest changes but doesn't merge
git pull origin main   # Retrieves and merges the latest changes
```  

### **8. What is a merge conflict in Git?**  
**Answer:**  
A merge conflict occurs when Git cannot automatically merge changes due to modifications in the same file on different branches.  

**Steps to resolve:**  
1. Identify conflicts using:  
   ```sh
   git status
   ```
2. Open the conflicting file and manually resolve the differences.  
3. Stage the resolved file:  
   ```sh
   git add file.txt
   ```
4. Commit the resolution:  
   ```sh
   git commit -m "Resolved merge conflict"
   ```  

### **9. What is Git Stash?**  
**Answer:**  
Git stash temporarily saves uncommitted changes, allowing you to work on something else without losing progress.  

Example:  
```sh
git stash        # Stashes current changes
git stash list   # Lists all stashed changes
git stash apply  # Restores the latest stashed changes
```  

### **10. What is the difference between `git reset` and `git revert`?**  
**Answer:**  
| Command | Purpose |
|---------|---------|
| `git reset` | Moves the branch pointer to a previous commit, removing later commits |
| `git revert` | Creates a new commit that undoes changes of a previous commit |

Example (Undo last commit but keep changes):  
```sh
git reset --soft HEAD~1
```  

Example (Undo a specific commit by creating a new commit):  
```sh
git revert 123abc
```  

---

## **Advanced Git Questions**  

### **11. What is the difference between `git merge` and `git rebase`?**  
**Answer:**  
| Command | Description |
|---------|-------------|
| `git merge` | Combines changes from different branches and creates a new merge commit |
| `git rebase` | Moves or integrates changes from one branch onto another, rewriting commit history |

Example:  
```sh
git checkout main
git merge feature-branch
```  

Rebasing example:  
```sh
git checkout feature-branch
git rebase main
```  

### **12. What is `git cherry-pick`?**  
**Answer:**  
`git cherry-pick` applies a specific commit from one branch to another.  

Example:  
```sh
git cherry-pick abc123
```  

### **13. How do you squash commits?**  
**Answer:**  
Squashing combines multiple commits into one.  

Example:  
```sh
git rebase -i HEAD~3  # Squash last 3 commits
```  

### **14. How do you create and push a Git tag?**  
**Answer:**  
Tags mark important commits, such as version releases.  

Example:  
```sh
git tag v1.0
git push origin v1.0
```  

### **15. How do you remove a file from Git history?**  
**Answer:**  
To remove a file from Git history but keep it locally:  
```sh
git rm --cached file.txt
git commit -m "Removed file from history"
git push origin main
```  

### **16. How do you check commit history in Git?**  
**Answer:**  
Use the following command:  
```sh
git log
```  
For a compact view:  
```sh
git log --oneline --graph
```  

---

## **Conclusion**  
This document serves as a quick reference for Git theoretical questions and answers. It is useful for interviews, revision, and learning Git concepts in-depth.  